# Copyright (c) 2025 sw.consulting
# This file is a part of Media Pi device agent

name: Build & Package media-pi-agent

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true    

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: armhf
            goos: linux
            goarch: arm
            goarm: '7'
          - name: arm64
            goos: linux
            goarch: arm64
            goarm: ''
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.1'

      - name: Run unit tests
        if: matrix.target.name == 'arm64'
        run: |
          go test ./...

      - name: Build agent
        run: |
          mkdir -p dist/${{ matrix.target.name }}
          CGO_ENABLED=0 \
          GOOS=${{ matrix.target.goos }} \
          GOARCH=${{ matrix.target.goarch }} \
          GOARM=${{ matrix.target.goarm }} \
          go build -trimpath -buildvcs=false \
            -ldflags "-s -w -extldflags '-static'" \
            -o dist/${{ matrix.target.name }}/media-pi-agent .

      - name: Show file info
        run: |
          file dist/${{ matrix.target.name }}/media-pi-agent || true
          du -h dist/${{ matrix.target.name }}/media-pi-agent || true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.59.0
          args: --timeout=5m

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: media-pi-agent-${{ matrix.target.name }}
          path: dist/${{ matrix.target.name }}/media-pi-agent
          if-no-files-found: error

  package:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        arch: [ armhf, arm64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download built binaries
        uses: actions/download-artifact@v5
        with:
          name: media-pi-agent-${{ matrix.arch }}
          path: dist/${{ matrix.arch }}

      - name: Make mkdeb executable
        run: chmod +x packaging/mkdeb.sh

      - name: Derive version
        id: ver
        run: |
          # If tag like v0.1.0 is present, use it; otherwise derive from short SHA
          if [[ "${GITHUB_REF}" =~ refs/tags/v(.+) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "version=0.0.0-$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          fi

      - name: Build .deb
        run: |
          ./packaging/mkdeb.sh "${{ matrix.arch }}" "${{ steps.ver.outputs.version }}" "dist/${{ matrix.arch }}/media-pi-agent"

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: media-pi-agent-deb-${{ matrix.arch }}
          path: build/media-pi-agent_*_${{ matrix.arch }}.deb
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build, package]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist-all

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist-all/**/media-pi-agent
            dist-all/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
