#!/usr/bin/env bash
# Copyright (c) 2025 sw.consulting
# This file is a part of Media Pi device agent

set -euo pipefail

# Определяем директорию скрипта (SCRIPT_DIR). Это нужно, чтобы
# корректно находить файлы в каталоге packaging, даже если mkdeb.sh
# запускают из другой текущей рабочей директории.
# ${BASH_SOURCE[0]} — путь к самому скрипту; обёртка с cd...pwd даёт
# абсолютный путь к каталогу, где лежит mkdeb.sh.
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Параметры скрипта:
# mkdeb.sh ARCH VERSION BIN_PATH
# ARCH: архитектура пакета (armhf | arm64)
# VERSION: версия пакета (напр., 0.1.0)
# BIN_PATH: путь к скомпилированному бинарнику media-pi-agent для этой архитектуры

ARCH="${1:?arch}"
VERSION="${2:?version}"
BIN="${3:?bin path}"

# Переменные для сборки пакета:
# PKG  - имя пакета (Package: ...)
# WORK - каталог, в котором будет размечено содержимое .deb (staging area)
# ROOT - ссылка на корень пакета внутри WORK. Оставляем как WORK для простоты.
PKG=media-pi-agent
WORK=build/deb/${PKG}_${VERSION}_${ARCH}
ROOT="${WORK}"

# Подготовка рабочей директории (staging area)
# Сначала удаляем старую staging tree (безопасно, т.к. внутри build/)
rm -rf "${WORK}"

# Создаём необходимые каталоги в структуре пакета:
# - /usr/local/bin      -> исполняемый бинарник
# - /etc/media-pi-agent -> конфигурация (agent.yaml)
# - /etc/polkit-1/rules.d -> правило polkit (сгенерированное)
# - /etc/systemd/system -> systemd service файл
# - ${WORK}/DEBIAN      -> метаданные пакета (control, conffiles, postinst)
mkdir -p "${ROOT}/usr/local/bin"
mkdir -p "${ROOT}/etc/media-pi-agent"
mkdir -p "${ROOT}/etc/polkit-1/rules.d"
mkdir -p "${ROOT}/etc/systemd/system"
mkdir -p "${WORK}/DEBIAN"

# Копируем содержимое пакета (payload)
# Используем install с правильными правами, чтобы гарантировать
# ожидаемые режимы доступа для бинарника и конфигурации.
install -m 0755 "${BIN}" "${ROOT}/usr/local/bin/media-pi-agent"

# Копируем agent.yaml из каталога packaging рядом с этим скриптом.
# Используем ${SCRIPT_DIR} — тогда пакет соберётся корректно,
# даже если mkdeb.sh запускали из корня репозитория или другой директории.
install -m 0644 "${SCRIPT_DIR}/agent.yaml" "${ROOT}/etc/media-pi-agent/agent.yaml"

# setup-media-pi.sh --> /usr/local/bin
install -m 0755 "${SCRIPT_DIR}/../setup/setup-media-pi.sh" "${ROOT}/usr/local/bin/setup-media-pi.sh"

# uninstall-media-pi.sh --> /usr/local/bin
install -m 0755 "${SCRIPT_DIR}/../setup/uninstall-media-pi.sh" "${ROOT}/usr/local/bin/uninstall-media-pi.sh"

# systemd service file --> /etc/systemd/system
install -m 0644 "${SCRIPT_DIR}/media-pi-agent.service" "${ROOT}/etc/systemd/system/media-pi-agent.service"

# Генерация правила polkit на этапе сборки.
# Пояснение: polkit-правила выполняются в изолированной JS-среде и
# не имеют доступа к файловой системе во время выполнения. Поэтому
# мы формируем правило заранее на этапе сборки пакета, используя
# список единиц (.service) из agent.yaml.

# Собираем массив уникальных имён единиц из agent.yaml
services=( )
if [ -r "${SCRIPT_DIR}/agent.yaml" ]; then
	# grep ищет токены, удовлетворяющие шаблону 'имя.service'
	# Разрешаем буквы, цифры, точки, подчёркивания и дефисы
	while IFS= read -r s; do
		services+=("$s")
	done < <(grep -oE '[A-Za-z0-9_.-]+\.service' "${SCRIPT_DIR}/agent.yaml" | sort -u)
fi

# Формируем JS-литерал массива allowed (string[])
if [ ${#services[@]} -gt 0 ]; then
	allowed_js="["
	for svc in "${services[@]}"; do
		# На всякий случай экранируем двойные кавычки в названиях
		esc="${svc//\"/\\\"}"
		allowed_js+="\"${esc}\","
	done
	# Удаляем последний разделитель и закрываем массив
	allowed_js="${allowed_js%, }]"
else
	allowed_js="[]"
fi

# Создаём правило polkit в staging tree. Это файл, который попадёт
# в пакет под /etc/polkit-1/rules.d/90-media-pi-agent.rules
cat > "${ROOT}/etc/polkit-1/rules.d/90-media-pi-agent.rules" <<EOF
// Generated by mkdeb.sh from packaging/agent.yaml
polkit.addRule(function(action, subject) {
	const allowed = ${allowed_js};
	// isPi — пользователь либо член группы svc-ops, либо сам 'pi'
	const isPi = subject.isInGroup('svc-ops') || subject.user == 'pi';
	const actions = [
		'org.freedesktop.systemd1.manage-units',
		'org.freedesktop.systemd1.manage-unit-files'
	];
	if (!isPi || actions.indexOf(action.id) === -1) return;
	const unit = action.lookup('unit');
	if (unit && allowed.indexOf(unit) !== -1) {
		return polkit.Result.YES;
	}
});
EOF

# Отмечаем конфигурационные файлы в DEBIAN/conffiles.
# Данные файлы — конфигурационные и при апгрейде система должна учитывать
# локальные изменения администратора.
# Поведение dpkg при наличии локальных правок:
# - при интерактивной установке предлагается выбрать заменить/сохранить
# - при неинтерактивной установке локальная версия обычно сохраняется
#   и новая записывается как .dpkg-new
cat > "${WORK}/DEBIAN/conffiles" <<EOF
/etc/media-pi-agent/agent.yaml
/etc/polkit-1/rules.d/90-media-pi-agent.rules
/etc/systemd/system/media-pi-agent.service
EOF

# Control file
cat > "${WORK}/DEBIAN/control" <<EOF
Package: ${PKG}
Version: ${VERSION}
Section: admin
Priority: optional
Architecture: ${ARCH}
Maintainer: Maxim Samsonov <maxirmx@sw.consulting>
Depends: dbus, policykit-1, systemd
Description: Media Pi Agent REST Service for Raspberry Pi
 Provides REST API to manage whitelisted systemd units via HTTP endpoints.
 Includes authentication and runs as a systemd service.
EOF

# Postinst: выполняется после установки пакета. 
# Убеждаемся, что существует опциональная системная группа svc-ops.
# Если группа уже есть, ошибки не будет
cat > "${WORK}/DEBIAN/postinst" <<'EOF'
#!/bin/sh
set -e
getent group svc-ops >/dev/null 2>&1 || groupadd -r svc-ops >/dev/null 2>&1 || true
# Если хотите автоматически добавлять пользователя 'pi' в эту группу,
# можно раскомментировать следующую строку (по соображениям безопасности
# это оставлено на усмотрение администратора):
id -u pi >/dev/null 2>&1 && usermod -aG svc-ops pi || true

# Reload systemd and enable the service
systemctl daemon-reload || true
systemctl enable media-pi-agent.service || true
echo "Media Pi Agent REST service installed. Use 'media-pi-agent setup' to configure."
echo "Then start with: systemctl start media-pi-agent"
exit 0
EOF
chmod 0755 "${WORK}/DEBIAN/postinst"

# Build .deb
OUT="build/${PKG}_${VERSION}_${ARCH}.deb"
dpkg-deb -Zxz --build "${WORK}" "${OUT}"
echo "Built ${OUT}"
